name: Deploy to Production

on:
  push:
    branches:
      - main
      - master
      - release/*
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker/**'
      - 'deploy/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:  # 保留手动触发选项

env:
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  DB_SERVER_IP: ${{ secrets.DB_SERVER_IP }}
  ALIYUN_REGISTRY: registry.cn-hongkong.aliyuncs.com
  ALIYUN_NAMESPACE: tongihttigerbreak
  ALIYUN_REPOSITORY: tigerhouse

jobs:
  # 第一阶段：初始化服务器环境
  init-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # 安装必要的工具
      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rsync sshpass
          
      # 检查 Docker 目录
      - name: Check Docker directory
        run: |
          echo "=== 检查本地 Docker 目录 ==="
          if [ ! -d "docker" ]; then
            echo "❌ 错误: docker 目录不存在"
            exit 1
          fi
          if [ ! -f "docker/docker-compose.yml" ]; then
            echo "❌ 错误: docker/docker-compose.yml 文件不存在"
            exit 1
          fi
          echo "本地 Docker 目录内容:"
          ls -la docker/
          echo "✅ 本地 Docker 目录检查完成"
          
      # 替换环境变量
      - name: Replace environment variables
        run: |
          echo "=== 替换环境变量 ==="
          # 备份原文件
          cp docker/docker-compose.yml docker/docker-compose.yml.bak
          
          # 一次性替换所有环境变量
          sed -i \
            -e "s|\${ALIYUN_REGISTRY}|${{ env.ALIYUN_REGISTRY }}|g" \
            -e "s|\${ALIYUN_NAMESPACE}|${{ env.ALIYUN_NAMESPACE }}|g" \
            -e "s|\${ALIYUN_REPOSITORY}|${{ env.ALIYUN_REPOSITORY }}|g" \
            -e "s|\${DB_SERVER_IP}|${{ secrets.DB_SERVER_IP }}|g" \
            -e "s|\${NEO4J_USER:-neo4j}|${{ secrets.NEO4J_USER }}|g" \
            -e "s|\${NEO4J_PASSWORD:-root123321}|${{ secrets.NEO4J_PASSWORD }}|g" \
            -e "s|\${MYSQL_ROOT_PASSWORD:-123456}|${{ secrets.MYSQL_ROOT_PASSWORD }}|g" \
            -e "s|\${MYSQL_DATABASE:-knowledge_graph}|${{ secrets.MYSQL_DATABASE }}|g" \
            -e "s|\${MYSQL_USER:-root}|${{ secrets.MYSQL_USER }}|g" \
            -e "s|\${MYSQL_PASSWORD:-123456}|${{ secrets.MYSQL_PASSWORD }}|g" \
            -e "s|\${MYSQL_PORT:-3307}|${{ secrets.MYSQL_PORT }}|g" \
            docker/docker-compose.yml
          
          echo "✅ 环境变量替换完成"
          
      # 复制 Docker 目录到服务器
      - name: Copy Docker directory to server
        run: |
          echo "=== 开始复制 Docker 目录到服务器 ==="
          # 显示本地文件内容
          echo "本地 docker-compose.yml 内容:"
          cat docker/docker-compose.yml
          
          # 复制文件
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no" docker/ "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/root/${{ secrets.PROJECT_NAME }}/docker/"
          
          # 显示服务器文件内容
          echo "服务器 docker-compose.yml 内容:"
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" "cat /root/${{ secrets.PROJECT_NAME }}/docker/docker-compose.yml"
          
          echo "✅ Docker 目录复制完成"
          
      # 验证服务器上的 Docker 目录
      - name: Verify Docker directory on server
        run: |
          echo "=== 验证服务器上的 Docker 目录 ==="
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" "echo '服务器 Docker 目录内容:'; ls -la /root/${{ secrets.PROJECT_NAME }}/docker/"
          echo "✅ 服务器 Docker 目录验证完成"
          
      # 执行初始化脚本
      - name: Execute init-server.sh
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          DB_SERVER_IP: ${{ secrets.DB_SERVER_IP }}
        run: |
          chmod +x ./deploy/init-server.sh
          ./deploy/init-server.sh

  # 第二阶段：并行构建前端和后端镜像
  build-images:
    needs: init-server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      # 并行构建前端和后端镜像
      - name: Build and push images
        run: |
          # 构建后端镜像
          docker build -t ${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ env.ALIYUN_REPOSITORY }}:backend-latest -f docker/backend.Dockerfile . &
          BACKEND_PID=$!
          
          # 构建前端镜像
          docker build -t ${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ env.ALIYUN_REPOSITORY }}:frontend-latest -f docker/frontend.Dockerfile ./frontend &
          FRONTEND_PID=$!
          
          # 等待两个构建完成
          wait $BACKEND_PID $FRONTEND_PID
          
          # 推送镜像
          docker push ${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ env.ALIYUN_REPOSITORY }}:backend-latest &
          docker push ${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ env.ALIYUN_REPOSITORY }}:frontend-latest &
          wait

  # 第三阶段：部署应用
  deploy:
    needs: build-images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # 准备部署环境
      - name: Prepare deployment
        run: |
          chmod +x ./deploy/deploy.sh
          
      # 执行部署
      - name: Execute deploy.sh
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          ALIYUN_REPOSITORY: ${{ env.ALIYUN_REPOSITORY }}
          ALIYUN_USERNAME: ${{ secrets.ALIYUN_USERNAME }}
          ALIYUN_PASSWORD: ${{ secrets.ALIYUN_PASSWORD }}
          DB_SERVER_IP: ${{ secrets.DB_SERVER_IP }}
        run: ./deploy/deploy.sh

      # 部署结果通知
      - name: Notify on success
        if: success()
        run: |
          echo "Deployment completed successfully!"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed!" 