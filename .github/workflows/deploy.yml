name: Deploy to Production

on:
  push:
    branches:
      - release/v1.0.3

jobs:
  init-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Execute init-server.sh
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
        run: |
          chmod +x ./deploy/init-server.sh
          ./deploy/init-server.sh
      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync sshpass
      - name: Check Docker directory
        run: |
          echo "=== 检查本地 Docker 目录 ==="
          if [ ! -d "docker" ]; then
            echo "❌ 错误: docker 目录不存在"
            exit 1
          fi
          if [ ! -f "docker/docker-compose.yml" ]; then
            echo "❌ 错误: docker/docker-compose.yml 文件不存在"
            exit 1
          fi
          echo "本地 Docker 目录内容:"
          ls -la docker/
          echo "✅ 本地 Docker 目录检查完成"
      - name: Copy Docker directory to server
        run: |
          echo "=== 开始复制 Docker 目录到服务器 ==="
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no" docker/ "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/root/${{ secrets.PROJECT_NAME }}/docker/"
          echo "✅ Docker 目录复制完成"
      - name: Verify Docker directory on server
        run: |
          echo "=== 验证服务器上的 Docker 目录 ==="
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" "echo '服务器 Docker 目录内容:'; ls -la /root/${{ secrets.PROJECT_NAME }}/docker/"
          echo "✅ 服务器 Docker 目录验证完成"

  build-images:
    needs: init-server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Aliyun Container Registry
        uses: aliyun/acr-login@v1
        with:
          region-id: cn-hongkong
          access-key-id: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.ALIYUN_REGISTRY }}/backend:${{ github.sha }} -f docker/backend.Dockerfile .
          docker push ${{ secrets.ALIYUN_REGISTRY }}/backend:${{ github.sha }}
      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.ALIYUN_REGISTRY }}/frontend:${{ github.sha }} -f docker/frontend.Dockerfile .
          docker push ${{ secrets.ALIYUN_REGISTRY }}/frontend:${{ github.sha }}

  deploy:
    needs: build-images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Execute deploy.sh
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
          ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
          ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
        run: |
          chmod +x ./deploy/deploy.sh
          ./deploy/deploy.sh
      - name: Notify on success
        if: success()
        run: |
          echo "Deployment completed successfully!"
      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed!" 